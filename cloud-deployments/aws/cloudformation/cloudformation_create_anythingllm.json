{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Production-ready ECS Fargate service for AnythingLLM & Milvus, with split SGs, CloudWatch Logs, SSM-backed env vars, and EFS persistence for Milvus",
  "Parameters": {
    "ClusterName": {
      "Type": "String",
      "Description": "Existing ECS cluster name"
    },
    "ImageUri": {
      "Type": "String",
      "Description": "ECR URI for the AnythingLLM container"
    },
    "MilvusImageUri": {
      "Type": "String",
      "Description": "Image URI for Milvus"
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id"
    },
    "SubnetIds": {
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "CertificateArn": {
      "Type": "String",
      "Description": "ACM certificate ARN for the ALB"
    },
    "DesiredCount": {
      "Type": "Number",
      "Default": 1
    },
    "ParameterPrefix": {
      "Type": "String",
      "Description": "SSM Parameter Store prefix for env vars (no leading or trailing slash)"
    }
  },
  "Resources": {
    "EcsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/ecs/anythingllm",
        "RetentionInDays": 14
      }
    },
    "MilvusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/ecs/milvus",
        "RetentionInDays": 14
      }
    },
    "ServiceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ALB SG - allows HTTP/HTTPS from anywhere",
        "VpcId": { "Ref": "VpcId" },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 443, "ToPort": 443, "CidrIp": "0.0.0.0/0" }
        ]
      }
    },
    "TaskSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ECS Task SG - allow ALB inbound on TCP port 3001 only",
        "VpcId": { "Ref": "VpcId" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3001,
            "ToPort": 3001,
            "SourceSecurityGroupId": { "Ref": "ServiceSecurityGroup" }
          }
        ]
      }
    },
    "EFSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "EFS SG - allows NFS (2049) from ECS tasks",
        "VpcId": { "Ref": "VpcId" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 2049,
            "ToPort": 2049,
            "SourceSecurityGroupId": { "Ref": "TaskSecurityGroup" }
          }
        ]
      }
    },
    "EFSFileSystem": {
      "Type": "AWS::EFS::FileSystem",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Encrypted": true,
        "FileSystemTags": [
          { "Key": "Name", "Value": "anythingllm-milvus" }
        ]
      }
    },
    "EFSMountTarget1": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "EFSFileSystem" },
        "SubnetId": { "Fn::Select": [0, { "Ref": "SubnetIds" }] },
        "SecurityGroups": [{ "Ref": "EFSecurityGroup" }]
      }
    },
    "EFSMountTarget2": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "EFSFileSystem" },
        "SubnetId": { "Fn::Select": [1, { "Ref": "SubnetIds" }] },
        "SecurityGroups": [{ "Ref": "EFSecurityGroup" }]
      }
    },
    "EFSMountTarget3": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "EFSFileSystem" },
        "SubnetId": { "Fn::Select": [2, { "Ref": "SubnetIds" }] },
        "SecurityGroups": [{ "Ref": "EFSecurityGroup" }]
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "anythingllm-alb",
        "Scheme": "internet-facing",
        "Subnets": { "Ref": "SubnetIds" },
        "SecurityGroups": [{ "Ref": "ServiceSecurityGroup" }]
      }
    },
    "TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "anythingllm-tg",
        "Port": 3001,
        "Protocol": "HTTP",
        "VpcId": { "Ref": "VpcId" },
        "TargetType": "ip",
        "HealthCheckPath": "/api/ping"
      }
    },
    "ListenerHTTP": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": { "Ref": "LoadBalancer" },
        "Protocol": "HTTP",
        "Port": 80,
        "DefaultActions": [
          {
            "Type": "redirect",
            "RedirectConfig": {
              "Protocol": "HTTPS",
              "Port": "443",
              "StatusCode": "HTTP_301"
            }
          }
        ]
      }
    },
    "ListenerHTTPS": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": { "Ref": "LoadBalancer" },
        "Protocol": "HTTPS",
        "Port": 443,
        "Certificates": [{ "CertificateArn": { "Ref": "CertificateArn" } }],
        "DefaultActions": [
          { "Type": "forward", "TargetGroupArn": { "Ref": "TargetGroup" } }
        ]
      }
    },
    "TaskExecutionRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain", 
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "ecs-tasks.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
          "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
          "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
        ]
      }
    },
    "TaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": "anythingllm-task",
        "Cpu": "1024",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": ["FARGATE"],
        "ExecutionRoleArn": { "Fn::GetAtt": ["TaskExecutionRole", "Arn"] },
        "Volumes": [
          {
            "Name": "milvus-data",
            "EfsVolumeConfiguration": {
              "FileSystemId": { "Ref": "EFSFileSystem" }
            }
          }
        ],
        "ContainerDefinitions": [
          {
            "Name": "anythingllm",
            "Image": { "Ref": "ImageUri" },
            "PortMappings": [{ "ContainerPort": 3001, "Protocol": "tcp" }],
            "Secrets": [
              {
                "Name": "LLM_PROVIDER",
                "ValueFrom": {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterPrefix}/LLM_PROVIDER"
                }
              },
              {
                "Name": "EMBEDDING_ENGINE",
                "ValueFrom": {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterPrefix}/EMBEDDING_ENGINE"
                }
              },
              {
                "Name": "VECTOR_DB",
                "ValueFrom": {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterPrefix}/VECTOR_DB"
                }
              },
              {
                "Name": "MILVUS_ENDPOINT",
                "ValueFrom": {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterPrefix}/MILVUS_ENDPOINT"
                }
              },
              {
                "Name": "MILVUS_USERNAME",
                "ValueFrom": {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterPrefix}/MILVUS_USERNAME"
                }
              },
              {
                "Name": "MILVUS_PASSWORD",
                "ValueFrom": {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterPrefix}/MILVUS_PASSWORD"
                }
              },
              {
                "Name": "OPEN_AI_KEY",
                "ValueFrom": {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterPrefix}/OPEN_AI_KEY"
                }
              },
              {
                "Name": "OPEN_MODEL_PREF",
                "ValueFrom": {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterPrefix}/OPEN_MODEL_PREF"
                }
              },
              {
                "Name": "AGENT_GSE_KEY",
                "ValueFrom": {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterPrefix}/AGENT_GSE_KEY"
                }
              },
              {
                "Name": "AGENT_GSE_CTX",
                "ValueFrom": {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterPrefix}/AGENT_GSE_CTX"
                }
              }
            ],
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": "/ecs/anythingllm",
                "awslogs-region": "us-east-2",
                "awslogs-stream-prefix": "anythingllm"
              }
            }
          },
          {
            "Name": "milvus",
            "Image": { "Ref": "MilvusImageUri" },
            "PortMappings": [{ "ContainerPort": 19530, "Protocol": "tcp" }],
            "MountPoints": [
              {
                "SourceVolume": "milvus-data",
                "ContainerPath": "/var/lib/milvus"
              }
            ],
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": "/ecs/milvus",
                "awslogs-region": "us-east-2",
                "awslogs-stream-prefix": "milvus"
              }
            }
          }
        ]
      }
    },
    "Service": {
      "Type": "AWS::ECS::Service",
      "DependsOn": ["ListenerHTTPS"],
      "Properties": {
        "Cluster": { "Ref": "ClusterName" },
        "ServiceName": "anythingllm-service",
        "TaskDefinition": { "Ref": "TaskDefinition" },
        "DesiredCount": { "Ref": "DesiredCount" },
        "LaunchType": "FARGATE",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "Subnets": { "Ref": "SubnetIds" },
            "SecurityGroups": [{ "Ref": "TaskSecurityGroup" }]
          }
        },
        "LoadBalancers": [
          {
            "ContainerName": "anythingllm",
            "ContainerPort": 3001,
            "TargetGroupArn": { "Ref": "TargetGroup" }
          }
        ]
      }
    }
  },
  "Outputs": {
    "LoadBalancerDNS": {
      "Description": "DNS name of the ALB",
      "Value": { "Fn::GetAtt": ["LoadBalancer", "DNSName"] }
    },
    "ServiceURL": {
      "Description": "HTTPS endpoint for AnythingLLM",
      "Value": {
        "Fn::Join": ["", ["https://", { "Fn::GetAtt": ["LoadBalancer", "DNSName"] }]]
      }
    }
  }
}
